create table public.profiles (
  id uuid not null,
  is_admin boolean null default false,
  created_at timestamp with time zone null default now(),
  constraint profiles_pkey primary key (id)
) TABLESPACE pg_default;

create index IF not exists idx_profiles_is_admin on public.profiles using btree (is_admin) TABLESPACE pg_default;

Create policy "Allow delete own profile"
on "public"."profiles"
to public
using (

  (auth.uid() = id)

);

Create policy "Allow insert own profile"
on "public"."profiles"
to public
with check (

  (auth.uid() = id)

);

create policy "Allow select own profile"
on "public"."profiles"
to public
using (

  (auth.uid() = id)

);

create policy "Allow update own profile"
on "public"."profiles"
to public
using (

  (auth.uid() = id)

);

create policy "Allow users to select their own profile"
on "public"."profiles"
to public
using (

  (id = auth.uid())

);

create policy "Allow users to update their own profile"
on "public"."profiles"
to public
using (

  (id = auth.uid())

);





create table public.players (
  id serial not null,
  name text null,
  team text null,
  notes text null,
  user_email text null,
  constraint players_pkey primary key (id)
) TABLESPACE pg_default;


create policy "Users can insert their own player"
on "public"."players"
to public
with check (
  (user_email = auth.email())

);

create policy "Users can select their own player"
on "public"."players"
to public
using (
 (user_email = auth.email())

);

create policy "Users can update their own player"
on "public"."players"
to public
using (

  (user_email = auth.email())

);

create table public.sessions (
  id serial not null,
  player_id integer null,
  date date null,
  session_name text null,
  video_source text null,
  kinovea_csv text null,
  notes text null,
  user_email text null,
  constraint sessions_pkey primary key (id),
  constraint sessions_player_id_fkey foreign KEY (player_id) references players (id)
) TABLESPACE pg_default;



create policy "Users can insert their own sessions"
on "public"."sessions"
to public
with check (

  (user_email = auth.email())

);

create policy "Users can select their own sessions"
on "public"."sessions"
to public
using (

  (user_email = auth.email())

);

create policy "Users can update their own sessions"
on "public"."sessions"
to public

using (

  (user_email = auth.email())

);

create table public.debug_logs (
  id bigint generated by default as identity not null,
  player_id bigint null,
  video_id text null,
  viewed_at timestamp with time zone null default now(),
  view_email_id text null,
  is_admin boolean null,
  is_user boolean null,
  constraint debug_logs_pkey primary key (id),
  constraint debug_logs_player_id_fkey foreign KEY (player_id) references players (id) on delete CASCADE
) TABLESPACE pg_default;


